name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

jobs:
  ci:
    name: ${{ matrix.os.name }} ${{ matrix.python.name }} ${{ matrix.qt.pyqt_version }}
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ matrix.os.container }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Linux
            runs-on: ubuntu-latest
            python_platform: linux
            aqt_architecture: gcc_64
            qt_compiler: gcc_64
            container: docker://python:3.8-buster
          - name: Windows
            runs-on: windows-latest
            python_platform: win32
            aqt_architecture: win64_msvc2017_64
            qt_compiler: msvc2017_64
            vs_path: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat
          - name: macOS
            runs-on: macos-latest
            python_platform: darwin
            aqt_architecture: clang_64
            qt_compiler: clang_64
        python:
          - name: 3.5
            tox: py35
            action: 3.5
          - name: 3.6
            tox: py36
            action: 3.6
          - name: 3.7
            tox: py37
            action: 3.7
          - name: 3.8
            tox: py38
            action: 3.8
        qt:
          - pyqt_version: 5.14.1
            qt_version: 5.14.1
        bitness:
          - name: x64
            action: x64
#         system:
#           - image: windows-2016
#             platform: windows
#             aqt_name: win64_msvc2017_64
#             qt_compiler: msvc2017_64
#             vs_path: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat
#             python_version: 3.6
#             bitness: x64
#             toxenv: py36
#           - image: windows-2016
#             platform: windows
#             aqt_name: win64_msvc2017_64
#             qt_compiler: msvc2017_64
#             vs_path: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat
#             python_version: 3.8
#             bitness: x64
#             toxenv: py38
#           - image: ubuntu-18.04
#             platform: linux
#             aqt_name: gcc_64
#             qt_compiler: gcc_64
#             python_version: 3.6
#             bitness: x64
#             toxenv: py36
#           - image: ubuntu-18.04
#             platform: linux
#             aqt_name: gcc_64
#             qt_compiler: gcc_64
#             python_version: 3.8
#             bitness: x64
#             toxenv: py38
#           - image: macos-10.15
#             platform: mac
#             aqt_name: clang_64
#             qt_compiler: clang_64
#             python_version: 3.6
#             bitness: x64
#             toxenv: py36
#           - image: macos-10.15
#             platform: mac
#             aqt_name: clang_64
#             qt_compiler: clang_64
#             python_version: 3.8
#             bitness: x64
#             toxenv: py38
#         versions:
#           - qt: 5.14.1
#             pyqt: 5.14.1

    env:
#      QT_COMPILER_DIRECTORY: ${{ env.QT_BASE_DIRECTORY }}/${{ matrix.qt }}/${{ matrix.arch.directory }}
      QT_VERSION: ${{ matrix.qt.qt_version }}
      QT_COMPILER: ${{ matrix.os.qt_compiler }}
      QT_ARCHITECTURE: ${{ matrix.os.aqt_architecture }}
      PYQT_VERSION: ${{ matrix.qt.pyqt_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
#      - name: Install
#        run: |
#          pip install aqtinstall sip
#          PyQt5==${{ matrix.versions.pyqt }}
      - name: Set up Python ${{ matrix.python.name }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python.action }}
          architecture: ${{ matrix.bitness.action }}
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os.python_platform == 'win32'
#      - name: Build wheel with Visual Studio
#        if: matrix.system.platform == 'windows'
#        run: |
#          "${{ matrix.system.vs_path }}"
#          pip wheel .
#          choco install visualstudio2019buildtools
      - name: pip/setuptools/tox
        run: |
          python -m pip install --upgrade pip setuptools
          pip install tox
#          pip install aqtinstall==0.7.5 py7zr==0.6b6 attrs aqtinstall hyperlink macholib pip psutil pylddwrap PyQt-builder requests setuptools sip vcversioner wheel
      - name: Install Linux dependencies
        if: matrix.os.python_platform == 'linux'
        run: |
          apt-get update --yes
          apt-get install --yes libgl1-mesa-dev libxkbcommon-x11-0 xvfb
          apt-get install --yes x11-utils libdbus-1-3
          # let's guess here...
          # apt-get install --yes mesa-utils linux-generic xserver-xorg-core xserver-xorg xserver-xorg-video-all xserver-xorg-input-all libwayland-egl1-mesa
      - name: Report info
        run: |
          git show --quiet HEAD
          python --version --version
          pip --version
          pip list
          pip freeze --all
          python -c "import sysconfig; print('Py_ENABLE_SHARED -> {}'.format(sysconfig.get_config_var('Py_ENABLE_SHARED')))"
      - name: Build wheel
#        if: matrix.system.platform != 'windows'
        # native shell for nmake...  keep commands here simple i guess
        run: |
          mkdir -p dist/
          pip wheel -vvv --no-deps --wheel-dir dist/ --no-clean .
#          pip wheel -vvv --no-build-isolation --no-deps --wheel-dir dist/ --no-clean .
#      - name: Download
#        run: |
#          venv/bin/pip download --no-deps --no-binary :all: --dest download PyQt5
#      - name: Test
#        run: |
#          tox -v -e "${{ matrix.toxenv }}"
      - name: Set WHEEL_PATH
        shell: python
        run: |
          import os
          import pathlib
          
          fspath = getattr(os, 'fspath', str)

          dist = pathlib.Path.cwd() / 'dist'
          [wheel] = dist.glob('*.whl')

          print('::set-env name=WHEEL_PATH::{}'.format(fspath(wheel)))
          print('::set-env name=WHEEL_STEM::{}'.format(wheel.stem))
      - name: Archive wheel
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env['WHEEL_STEM'] }}
          path: dist
      - name: Test
        run: |
          tox -e ${{ matrix.python.tox }} --installpkg ${{ env['WHEEL_PATH'] }}
#      - name: Tree /tmp/pip-*
#        if: always() && matrix.system.platform == 'mac'
#        shell: python
#        run: |
#          import os
#          import pathlib
#          import subprocess
#          import tempfile
#
#          fspath = getattr(os, 'fspath', str)
#
#          temp = pathlib.Path(os.environ['BUILD_PATH'])
#
#          subprocess.run(['pip', 'install', 'py-tree'])
#          for path in temp.glob('pip-*'):
#            subprocess.run(['py-tree', fspath(path)])
#      - name: Archive temp
#        if: always() && matrix.system.platform == 'mac'
#        uses: actions/upload-artifact@v1
#        with:
#          name: temp-${{ matrix.system.platform }}
#          path: ${{ env['BUILD_PATH'] }}
#      - name: prep
#        if: always()
#        run: |
#          apt install --yes xvfb
#          Xvfb :1 -screen 0 1600x1200x24&
#      - name: Setup tmate session
#        if: always()
#        uses: mxschmitt/action-tmate@v2
