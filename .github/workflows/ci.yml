name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

jobs:
  ci:
    name: ${{ matrix.os.name }} ${{ matrix.python.name }} ${{ matrix.qt.pyqt_version }}
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ format(matrix.os.container, matrix.python.docker) }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Linux
            runs-on: ubuntu-latest
            python_platform: linux
            aqt_architecture: gcc_64
            qt_compiler: gcc_64
            container: docker://python:{0}-buster
            cibuildwheel_before: yum install mesa-libGL-devel
          - name: Windows
            runs-on: windows-latest
            python_platform: win32
            aqt_architecture: win64_msvc2017_64
            qt_compiler: msvc2017_64
            vs_path: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat
#          - name: macOS
#            runs-on: macos-latest
#            python_platform: darwin
#            aqt_architecture: clang_64
#            qt_compiler: clang_64
        python:
          - name: 3.5
            tox: py35
            action: 3.5
            docker: 3.5
            cibuildwheel: cp38
          - name: 3.6
            tox: py36
            action: 3.6
            docker: 3.6
            cibuildwheel: cp36
          - name: 3.7
            tox: py37
            action: 3.7
            docker: 3.7
            cibuildwheel: cp37
          - name: 3.8
            tox: py38
            action: 3.8
            docker: 3.8
            cibuildwheel: cp38
        qt:
#          - pyqt_version: 5.14.0
#            qt_version: 5.14.0
#          - pyqt_version: 5.14.1
#            qt_version: 5.14.1
          - pyqt_version: 5.14.2
            qt_version: 5.14.2
        bitness:
          - name: x64
            action: x64
            cibuildwheel: '*64*'
    env:
      QT_VERSION: ${{ matrix.qt.qt_version }}
      QT_COMPILER: ${{ matrix.os.qt_compiler }}
      QT_ARCHITECTURE: ${{ matrix.os.aqt_architecture }}
      PYQT_VERSION: ${{ matrix.qt.pyqt_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python.name }}
        if: matrix.os.python_platform != 'linux'
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python.action }}
          architecture: ${{ matrix.bitness.action }}
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os.python_platform == 'win32'
      - name: pip/setuptools/tox/cibuildwheel
        run: |
          python -m pip install --upgrade pip setuptools
          pip install tox cibuildwheel
      - name: Report info
        run: |
          git show --quiet HEAD
          python --version --version
          pip --version
          pip list
          pip freeze --all
          python -c "import sysconfig; print('Py_ENABLE_SHARED -> {}'.format(sysconfig.get_config_var('Py_ENABLE_SHARED')))"
#      - name: Install Linux Docker dependencies
#        if: matrix.os.python_platform == 'linux'
#        run: |
#          apt-get update --yes
#          apt-get install --yes docker.io
#      - name: Build wheel
#        run: |
#          cibuildwheel --output-dir dist/
#        env:
#          CIBW_BUILD: ${{ matrix.python.cibuildwheel }}-${{ matrix.bitness.cibuildwheel }}
#          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
#          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
#          CIBW_BEFORE_BUILD: ${{ matrix.os.cibuildwheel_before }}
#          CIBW_ENVIRONMENT: QT_VERSION=${{ matrix.qt.qt_version }} QT_COMPILER=${{ matrix.os.qt_compiler }} QT_ARCHITECTURE=${{ matrix.os.aqt_architecture }} PYQT_VERSION=${{ matrix.qt.pyqt_version }}
      - name: Install Linux build dependencies
        if: matrix.os.python_platform == 'linux'
        run: |
          apt-get update --yes
          apt-get install --yes libgl1-mesa-dev
      - name: Build wheel
        # native shell for nmake...  keep commands here simple i guess
        run: |
          mkdir -p dist/
          pip wheel -vvv --no-deps --wheel-dir dist/ --no-clean .
      - name: Set WHEEL_PATH
        shell: python
        run: |
          import os
          import pathlib
          
          fspath = getattr(os, 'fspath', str)

          dist = pathlib.Path.cwd() / 'dist'
          [wheel] = dist.glob('*.whl')

          print('::set-env name=WHEEL_PATH::{}'.format(fspath(wheel)))
          print('::set-env name=WHEEL_STEM::{}'.format(wheel.stem))
      - name: Archive individual wheel
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env['WHEEL_STEM'] }}
          path: dist
      - name: Archive all wheels
        uses: actions/upload-artifact@v1
        with:
          name: pyqt5_tools-all_wheels
          path: dist
      - name: Install Linux test dependencies
        if: matrix.os.python_platform == 'linux'
        run: |
          apt-get update --yes
          apt-get install --yes libgl1-mesa-dev libxkbcommon-x11-0 xvfb
          apt-get install --yes x11-utils libdbus-1-3
          # let's guess here...
          # apt-get install --yes mesa-utils linux-generic xserver-xorg-core xserver-xorg xserver-xorg-video-all xserver-xorg-input-all libwayland-egl1-mesa
      - name: Test
        run: |
          tox -e ${{ matrix.python.tox }} --installpkg ${{ env['WHEEL_PATH'] }}
#      - name: prep
#        if: always()
#        run: |
#          apt install --yes xvfb
#          Xvfb :1 -screen 0 1600x1200x24&
#      - name: Setup tmate session
#        if: always()
#        uses: mxschmitt/action-tmate@v2
  maybe_publish:
    name: Maybe Publish
    runs-on: ubuntu-latest
    container: docker://python:3.8-buster
    needs:
      - ci
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Download all wheels
        uses: actions/download-artifact@v1
        with:
          name: pyqt5_tools-all_wheels
          path: dist
      - name: Install Python packages
        run: |
          pip install --upgrade twine
      - name: Maybe publish
        run: |
          python twineontag.py
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  all:
    name: All
    runs-on: ubuntu-latest
    needs:
      - ci
      - maybe_publish
    steps:
      - name: This
        shell: python
        run: |
          import this
